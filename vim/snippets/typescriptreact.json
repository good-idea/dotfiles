{
  "React Native Function Component": {
    "prefix": "rnfcomp",
    "body": [
      "import React, { FC } from 'react'",
      "import { Text } from 'react-native'",
      "",
      "interface ${1:NAME}Props {",
      "  /* */",
      "}",
      "",
      "export const $1: FC<$1Props> = (props) => {",
      "  return <Text>...</Text>",
      "}",
      ""
    ],
    "description": "React Function Component"
  },

  "React Function Component": {
    "prefix": "rfcomp",
    "body": [
      "import React, { FC } from 'react'",
      "",
      "type ${1:NAME}Props = {",
      "  /* */",
      "}",
      "",
      "export const $1: FC<$1Props> = (props) => {",
      "  return <div>...</div>",
      "}",
      ""
    ],
    "description": "React Function Component"
  },
  "React Context Provider": {
    "prefix": "rcontext",
    "body": [
      "import React from 'react'",
      "",
      "type ${1:Title}ContextValue = {",
      "  /* */",
      "}",
      "",
      "const ${1:Title}Context = React.createContext<${1:Title}ContextValue | undefined>(undefined)",
      "",
      "export const ${1:Title}Consumer = ${1:Title}Context.Consumer",
      "",
      "export const use${1:Title} = () => {",
      "  const ctx = React.useContext(${1:Title}Context)",
      "  if (!ctx) throw new Error('use$1Context must be used within a $1Provider')",
      "  return ctx",
      "}",
      "",
      "interface ${1:Title}Props {",
      "  children: React.ReactNode",
      "}",
      "",
      "export const ${1:Title}Provider = ({ children }: ${1:Title}Props) => {",
      "  const value = {",
      "    /* */",
      "  }",
      "",
      "  return <${1:Title}Context.Provider value={value}>{children}</${1:Title}Context.Provider>",
      "}"
    ],
    "description": "React Context Provider"
  },
  "A new Jest test file": {
    "prefix": "jtestfilereact",
    "body": [
      "import React from 'react'",
      "import { render } from '@testing-library/react'",
      "import { ${1:Component} } from '../${1:example}'",
      "",
      "describe('${1:Component}', () => {",
      "  it.skip('should ...', async () => {",
      "    const { getByText } = render(<${1:Component} />)",
      "  })",
      "})"
    ],
    "description": "A new Jest test file"
  },
  "A new Jest assertion": {
    "prefix": "itshould",
    "body": ["it.skip('should ${1:dosomething}', async () => {", "  //", "})"],
    "description": "A new Jest assertion"
  },
  "Next.js Route with GetServerSideProps": {
    "prefix": "nextroutegssp",
    "body": [
      "import React, { FC } from 'react';",
      "import { GetServerSideProps } from 'next';",
      "import { ${1:Page}View } from '../views/${1:Page}View';",
      "",
      "type ${1:Page}Props = {",
      "  //",
      "}",
      "",
      "type ${1:Page}Params = {",
      "  param: string",
      "}",
      "",
      "const ${1:Page}: FC<${1:Page}Props> = (props) => {",
      "  return <${1:Page}View />;",
      "};",
      "",
      "export const getServerSideProps: GetServerSideProps<${1:Page}Props> = async (",
      "  ctx",
      ") => {",
      "  //",
      "  return {",
      "    props: {},",
      "  };",
      "};",
      "",
      "export const getStaticProps: GetStaticProps<${1:Page}Params> = async (",
      "  ctx",
      ") => {",
      "  return {",
      "    paths",
      "  }",
      "}",
      "",
      "export default ${1:Page}"
    ],
    "description": "Next.js Page with GetServerSideProps"
  }
}
